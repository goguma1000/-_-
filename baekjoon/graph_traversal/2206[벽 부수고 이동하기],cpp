#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int main() {
	std::ios::sync_with_stdio(false); std::cin.tie(NULL); std::cout.tie(NULL);
	int row, col;
	scanf("%d", &row);
	scanf("%d", &col);
	vector<vector<int>> map(row);
	vector<vector<vector<bool>>> visited(row);
	for (int i = 0; i < row; i++) {
		map[i].resize(col);
		visited[i].resize(col);
		for (int j = 0; j < col; j++) {
			visited[i][j].resize(2,false);
			scanf("%1d", &map[i][j]);
		}
	}

	if (row == 1 && col == 1) {
		printf("1\n");
		return 0;
	}
	bool isfind(false);
	int step(1);
	const pair<int, int> dydx[4] = { {-1,0}, {0,1}, {1, 0}, {0,-1} };
	queue<pair<int, int>> positions;
	queue<int> left_K;
	positions.push({ 0,0 });
	visited[0][0][1] = true;
	left_K.push(1);
	while (!positions.empty()) {
		int lc = positions.size();
		for (int i = 0; i < lc; i++) {
			auto pos = positions.front();
			int left_k = left_K.front();
			positions.pop();
			left_K.pop();
			for (const auto& _dydx : dydx) {
				int newY = pos.first + _dydx.first;
				int newX = pos.second + _dydx.second;
				if (newY < 0 || newY >= row || newX < 0 || newX >= col) continue;
				if (newY == row - 1 && newX == col - 1) {
					isfind = true;
					break;
				}
				if (map[newY][newX] == 0 && !visited[newY][newX][left_k]) {
					positions.push({ newY, newX });
					visited[newY][newX][left_k] = true;
					left_K.push(left_k);
				}
				else if (map[newY][newX] == 1 && left_k > 0 && !visited[newY][newX][left_k - 1]) {
					positions.push({ newY, newX });
					visited[newY][newX][left_k - 1] = true;
					left_K.push(0);
				}
			}
			if (isfind) break;
		}
		step++;
		if (isfind) break;
	}
	if (isfind) printf("%d\n", step);
	else printf("-1\n");
	return 0;
}
